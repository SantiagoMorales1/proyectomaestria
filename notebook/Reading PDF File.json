{
	"name": "Reading PDF File",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spproymaestria",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "c110e971-c5c2-4fa9-910d-4c0aebd48d27"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/01c2d20c-2c85-4121-8018-3a801e74d84c/resourceGroups/ProyectoMaestria/providers/Microsoft.Synapse/workspaces/synapseproyectomaestria/bigDataPools/spproymaestria",
				"name": "spproymaestria",
				"type": "Spark",
				"endpoint": "https://synapseproyectomaestria.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spproymaestria",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Procesamiento con PyPDF2\r\n",
					"\r\n",
					"from pyspark.sql import SparkSession\r\n",
					"from io import BytesIO\r\n",
					"import PyPDF2\r\n",
					"\r\n",
					"pdf_path = \"abfss://stagefiles@datalakeproyectomaestria.dfs.core.windows.net/Extracto_7358651_202108_TARJETA_VISA_2166.pdf\"\r\n",
					"pdf_password = \"1233491047\"\r\n",
					"\r\n",
					"# Read the PDF file as bytes\r\n",
					"pdf_bytes = spark.read \\\r\n",
					"    .format(\"binaryFile\") \\\r\n",
					"    .option(\"path\", pdf_path) \\\r\n",
					"    .load() \\\r\n",
					"    .select(\"content\") \\\r\n",
					"    .collect()[0][0]\r\n",
					"\r\n",
					"# Create a BytesIO stream from the PDF bytes\r\n",
					"pdf_stream = BytesIO(pdf_bytes)\r\n",
					"pdf_stream.seek(0)  # Ensure the stream is at the beginning\r\n",
					"\r\n",
					"# Create a PdfReader object from the PDF stream\r\n",
					"pdf_reader = PyPDF2.PdfReader(pdf_stream)\r\n",
					"\r\n",
					"# Check if the PDF file is encrypted (password-protected)\r\n",
					"if pdf_reader.is_encrypted:\r\n",
					"    # Decrypt the PDF file with the provided password\r\n",
					"    pdf_reader.decrypt(pdf_password)\r\n",
					"\r\n",
					"# Extract text from the PDF pages\r\n",
					"pdf_content = \"\"\r\n",
					"for page_num in range(len(pdf_reader.pages)):\r\n",
					"    page = pdf_reader.pages[page_num]\r\n",
					"    pdf_content += page.extract_text()\r\n",
					"\r\n",
					"print(pdf_content)\r\n",
					"\r\n",
					"# Perform further processing or analysis on the content\r\n",
					"# For example, you can save it to a storage location or perform text mining operations.\r\n",
					""
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#pROCESAMIENTO CON Rapid Miner\r\n",
					"\r\n",
					"from pyspark.sql import SparkSession\r\n",
					"from io import BytesIO\r\n",
					"from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter\r\n",
					"from pdfminer.pdfpage import PDFPage\r\n",
					"from pdfminer.converter import TextConverter\r\n",
					"from pdfminer.layout import LAParams\r\n",
					"import io\r\n",
					"\r\n",
					"spark = SparkSession.builder \\\r\n",
					"    .appName(\"PDF Extraction\") \\\r\n",
					"    .getOrCreate()\r\n",
					"\r\n",
					"pdf_path = \"abfss://stagefiles@datalakeproyectomaestria.dfs.core.windows.net/Extracto_7358651_202108_TARJETA_VISA_2166.pdf\"\r\n",
					"pdf_password = \"1233491047\"\r\n",
					"\r\n",
					"# Read the PDF file as bytes\r\n",
					"pdf_bytes = spark.read \\\r\n",
					"    .format(\"binaryFile\") \\\r\n",
					"    .option(\"path\", pdf_path) \\\r\n",
					"    .load() \\\r\n",
					"    .select(\"content\") \\\r\n",
					"    .collect()[0][0]\r\n",
					"\r\n",
					"# Create a BytesIO stream from the PDF bytes\r\n",
					"pdf_stream = BytesIO(pdf_bytes)\r\n",
					"pdf_stream.seek(0)  # Ensure the stream is at the beginning\r\n",
					"\r\n",
					"# Create PDFResourceManager object and set parameters\r\n",
					"rsrcmgr = PDFResourceManager()\r\n",
					"retstr = io.StringIO()\r\n",
					"\r\n",
					"# Create TextConverter object for the PDF page interpretation\r\n",
					"laparams = LAParams()\r\n",
					"device = TextConverter(rsrcmgr, retstr, laparams=laparams)\r\n",
					"\r\n",
					"# Create PDFPageInterpreter object\r\n",
					"interpreter = PDFPageInterpreter(rsrcmgr, device)\r\n",
					"\r\n",
					"# Process each page of the PDF file\r\n",
					"password = pdf_password.encode()\r\n",
					"pages = PDFPage.get_pages(pdf_stream, password=password, check_extractable=True)\r\n",
					"for page in pages:\r\n",
					"    interpreter.process_page(page)\r\n",
					"\r\n",
					"# Get the extracted text from the StringIO object\r\n",
					"pdf_content = retstr.getvalue()\r\n",
					"\r\n",
					"# Close the StringIO objects\r\n",
					"device.close()\r\n",
					"retstr.close()\r\n",
					"\r\n",
					"print(pdf_content)\r\n",
					"\r\n",
					"\r\n",
					"# Perform further processing or analysis on the content\r\n",
					"# For example, you can save it to a storage location or perform text mining operations.\r\n",
					""
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}