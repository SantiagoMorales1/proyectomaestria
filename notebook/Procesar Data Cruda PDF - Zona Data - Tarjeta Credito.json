{
	"name": "Procesar Data Cruda PDF - Zona Data - Tarjeta Credito",
	"properties": {
		"folder": {
			"name": "LecturaScripts"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spproymaestria",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "41a17e83-ea2a-49fa-9ea0-bd58148328db"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/01c2d20c-2c85-4121-8018-3a801e74d84c/resourceGroups/ProyectoMaestria/providers/Microsoft.Synapse/workspaces/synapseproyectomaestria/bigDataPools/spproymaestria",
				"name": "spproymaestria",
				"type": "Spark",
				"endpoint": "https://synapseproyectomaestria.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spproymaestria",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"#Importar Librerias Necesarias\r\n",
					"\r\n",
					"from pyspark.sql.functions import split\r\n",
					"from pyspark.sql.functions import col\r\n",
					"from pyspark.sql.functions import size\r\n",
					"from pyspark.sql.functions import explode\r\n",
					"from pyspark.sql.types import StructType, StructField, StringType, IntegerType, DateType, DoubleType\r\n",
					"from pyspark.sql.functions import row_number\r\n",
					"from pyspark.sql.window import Window"
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Configurar parametros aqui\r\n",
					"\r\n",
					"user = \"bsmoralesg@outlook.com\"\r\n",
					"type = \"Tarjeta Credito\"\r\n",
					"fecha = \"10012023\"\r\n",
					"#name = \"Extracto_403340132_202305_TARJETA_VISA_2166\"\r\n",
					"name = \"Extracto_7358651_202108_TARJETA_VISA_2166\""
				],
				"execution_count": 67
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Configurar rutas de origen y destino de archivos\r\n",
					"\r\n",
					"pathsource = \"abfss://stagedata@datalakeproyectomaestria.dfs.core.windows.net/\"+user+\"/\"+type+\"/\"+fecha+\"/\"+name+\"/Raw\"\r\n",
					"path_sink = \"abfss://stagedata@datalakeproyectomaestria.dfs.core.windows.net/\"+user+\"/\"+type+\"/\"+fecha+\"/\"+name\r\n",
					""
				],
				"execution_count": 68
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"#Obtener Datos para Tarjeta Credito\r\n",
					"\r\n",
					"DataCruda = spark.read.load(pathsource+\"/*.parquet\", format='parquet')"
				],
				"execution_count": 69
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Dividir los valores por salto de linea\r\n",
					"\r\n",
					"df_split = DataCruda.withColumn(\"contenido\", split(DataCruda[\"contenido\"], \"\\n\"))\r\n",
					"\r\n",
					"# Transformar la columna array para crear una nueva fila por cada elemento\r\n",
					"df_formated = df_split.select(df_split.index, df_split.pagenumber, df_split.x0, df_split.x1, df_split.y0, df_split.y1, explode(\"contenido\").alias(\"contenido\"))\r\n",
					"\r\n",
					"#Crear idnetificar unico  basado enel orden de lectura\r\n",
					"\r\n",
					"Incremental = Window.orderBy(\"pagenumber\",\"index\")\r\n",
					"df_formated = df_formated.withColumn(\"UniqueId\", row_number().over(Incremental))"
				],
				"execution_count": 70
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(df_formated)"
				],
				"execution_count": 71
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Obtener Informacion de Cliente\r\n",
					"\r\n",
					"Nombre = df_formated.select(df_formated.contenido).where(df_formated.UniqueId == 2).first()[0]\r\n",
					"Email = user\r\n",
					"Direccion = df_formated.select(df_formated.contenido).where(df_formated.UniqueId == 4).first()[0]\r\n",
					"Ciudad_1 = df_formated.select(df_formated.contenido).where(df_formated.UniqueId == 5).first()[0]\r\n",
					"Ciudad_2 = df_formated.select(df_formated.contenido).where(df_formated.UniqueId == 6).first()[0]\r\n",
					"\r\n",
					"# Crear dataframe para informacion de cliente\r\n",
					"\r\n",
					"schemaCliente = StructType([ \\\r\n",
					"    StructField(\"Nombre\",StringType(),True), \\\r\n",
					"    StructField(\"Email\",StringType(),True), \\\r\n",
					"    StructField(\"Direccion\",StringType(),True), \\\r\n",
					"    StructField(\"Ciudad_1\",StringType(),True), \\\r\n",
					"    StructField(\"Ciudad_2\", StringType(), True) \\\r\n",
					"  ])\r\n",
					"\r\n",
					"data_Cliente = [(Nombre, Email, Direccion, Ciudad_1, Ciudad_2)]\r\n",
					"\r\n",
					"df_Cliente = spark.createDataFrame(data=data_Cliente,schema=schemaCliente)"
				],
				"execution_count": 72
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Obtener Informacion de Prodcuto\r\n",
					"\r\n",
					"TipoProducto = 'Tarjeta Credito'\r\n",
					"CupoTotal =  df_formated.select(df_formated.contenido).where(df_formated.UniqueId == 55).first()[0]\r\n",
					"NumeroTarjeta = df_formated.select(df_formated.contenido).where(df_formated.UniqueId == 24).first()[0]\r\n",
					"TasaInteresMVCompra1Mes = df_formated.select(df_formated.contenido).where(df_formated.UniqueId == 94).first()[0]\r\n",
					"TasaInteresMVCompra2MesOMas = df_formated.select(df_formated.contenido).where(df_formated.UniqueId == 95).first()[0]\r\n",
					"TasaInteresMVImpuestos = df_formated.select(df_formated.contenido).where(df_formated.UniqueId == 96).first()[0]\r\n",
					"TasaInteresMVAvances = df_formated.select(df_formated.contenido).where(df_formated.UniqueId == 97).first()[0]\r\n",
					"TasaInteresMVMora = df_formated.select(df_formated.contenido).where(df_formated.UniqueId == 98).first()[0]\r\n",
					"TasaInteresEACompra1Mes = df_formated.select(df_formated.contenido).where(df_formated.UniqueId == 100).first()[0]\r\n",
					"TasaInteresEACompra2MesOMas = df_formated.select(df_formated.contenido).where(df_formated.UniqueId == 101).first()[0]\r\n",
					"TasaInteresEAImpuestos = df_formated.select(df_formated.contenido).where(df_formated.UniqueId == 102).first()[0]\r\n",
					"TasaInteresEAAvances = df_formated.select(df_formated.contenido).where(df_formated.UniqueId == 103).first()[0]\r\n",
					"TasaInteresEAMora = df_formated.select(df_formated.contenido).where(df_formated.UniqueId == 104).first()[0]\r\n",
					"\r\n",
					"# Crear dataframe para informacion de producto\r\n",
					"\r\n",
					"schemaProducto = StructType([ \\\r\n",
					"    StructField(\"TipoProducto\",StringType(),True), \\\r\n",
					"    StructField(\"CupoTotal\",StringType(),True), \\\r\n",
					"    StructField(\"NumeroTarjeta\",StringType(),True), \\\r\n",
					"    StructField(\"TasaInteresMVCompra1Mes\", StringType(), True), \\\r\n",
					"    StructField(\"TasaInteresMVCompra2MesOMas\", StringType(), True), \\\r\n",
					"    StructField(\"TasaInteresMVImpuestos\", StringType(), True), \\\r\n",
					"    StructField(\"TasaInteresMVAvances\", StringType(), True), \\\r\n",
					"    StructField(\"TasaInteresMVMora\", StringType(), True), \\\r\n",
					"    StructField(\"TasaInteresEACompra1Mes\", StringType(), True), \\\r\n",
					"    StructField(\"TasaInteresEACompra2MesOMas\", StringType(), True), \\\r\n",
					"    StructField(\"TasaInteresEAImpuestos\", StringType(), True), \\\r\n",
					"    StructField(\"TasaInteresEAAvances\", StringType(), True), \\\r\n",
					"    StructField(\"TasaInteresEAMora\", StringType(), True) \\\r\n",
					"  ])\r\n",
					"\r\n",
					"data_Producto = [(TipoProducto, CupoTotal, NumeroTarjeta, TasaInteresMVCompra1Mes, TasaInteresMVCompra2MesOMas, TasaInteresMVImpuestos, \\\r\n",
					"    TasaInteresMVAvances, TasaInteresMVMora, TasaInteresEACompra1Mes, TasaInteresEACompra1Mes, TasaInteresEAImpuestos, TasaInteresEAAvances, TasaInteresEAMora\r\n",
					")]\r\n",
					"\r\n",
					"df_Producto = spark.createDataFrame(data=data_Producto,schema=schemaProducto)\r\n",
					""
				],
				"execution_count": 73
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Definir estructura para Informacion de ID Transaccion\r\n",
					"\r\n",
					"schema1 = StructType([\r\n",
					"    StructField(\"id\", IntegerType(), nullable=True),\r\n",
					"    StructField(\"IdTransaccion\", StringType(), nullable=True)\r\n",
					"])\r\n",
					"\r\n",
					"df_idTransacciones = spark.createDataFrame([], schema1)\r\n",
					"ArrayIdTransacciones = []\r\n",
					"\r\n",
					"\r\n",
					"# Definir estructura para fecha Transaccion\r\n",
					"\r\n",
					"schema2 = StructType([\r\n",
					"    StructField(\"id\", IntegerType(), nullable=True),\r\n",
					"    StructField(\"FechaTransaccion\", StringType(), nullable=True)\r\n",
					"])\r\n",
					"\r\n",
					"df_FechaTransacciones = spark.createDataFrame([], schema2)\r\n",
					"ArrayFechaTransacciones = []\r\n",
					"\r\n",
					"\r\n",
					"# Definir estructura para fecha Descripciones\r\n",
					"\r\n",
					"schema3 = StructType([\r\n",
					"    StructField(\"id\", IntegerType(), nullable=True),\r\n",
					"    StructField(\"DescripcionTransaccion\", StringType(), nullable=True)\r\n",
					"])\r\n",
					"\r\n",
					"df_DescripcionTransacciones = spark.createDataFrame([], schema3)\r\n",
					"ArrayDescripcionTransacciones = []\r\n",
					"\r\n",
					"\r\n",
					"# Definir estructura para Costo transaccion\r\n",
					"\r\n",
					"schema4 = StructType([\r\n",
					"    StructField(\"id\", IntegerType(), nullable=True),\r\n",
					"    StructField(\"CostoTransaccion\", DoubleType(), nullable=True)\r\n",
					"])\r\n",
					"\r\n",
					"df_CostoTransacciones = spark.createDataFrame([], schema4)\r\n",
					"ArrayCostoTransacciones = []\r\n",
					"\r\n",
					"\r\n",
					"# Definir estructura para Tasa Pactada\r\n",
					"\r\n",
					"schema5 = StructType([\r\n",
					"    StructField(\"id\", IntegerType(), nullable=True),\r\n",
					"    StructField(\"TasaPactada\", DoubleType(), nullable=True)\r\n",
					"])\r\n",
					"\r\n",
					"df_TasaPactada = spark.createDataFrame([], schema5)\r\n",
					"ArrayTasaPactada = []\r\n",
					"\r\n",
					"\r\n",
					"# Definir estructura para Tasa Facturada\r\n",
					"\r\n",
					"schema6 = StructType([\r\n",
					"    StructField(\"id\", IntegerType(), nullable=True),\r\n",
					"    StructField(\"TasaFacturada\", DoubleType(), nullable=True)\r\n",
					"])\r\n",
					"\r\n",
					"df_TasaFacturada = spark.createDataFrame([], schema6)\r\n",
					"ArrayTasaFacturada = []\r\n",
					"\r\n",
					"\r\n",
					"# Definir estructura para Cargos y Abonos\r\n",
					"\r\n",
					"schema7 = StructType([\r\n",
					"    StructField(\"id\", IntegerType(), nullable=True),\r\n",
					"    StructField(\"CargosYAbonos\", DoubleType(), nullable=True)\r\n",
					"])\r\n",
					"\r\n",
					"df_CargosYAbonos = spark.createDataFrame([], schema7)\r\n",
					"ArrayCargosYAbonos = []\r\n",
					"\r\n",
					"\r\n",
					"# Definir estructura Saldo A Diferir\r\n",
					"\r\n",
					"schema8 = StructType([\r\n",
					"    StructField(\"id\", IntegerType(), nullable=True),\r\n",
					"    StructField(\"SaldoADiferir\", DoubleType(), nullable=True)\r\n",
					"])\r\n",
					"\r\n",
					"df_SaldoADiferir = spark.createDataFrame([], schema8)\r\n",
					"ArraySaldoADiferir = []\r\n",
					"\r\n",
					"\r\n",
					"# Definir estructura Cuotas\r\n",
					"\r\n",
					"schema9 = StructType([\r\n",
					"    StructField(\"id\", IntegerType(), nullable=True),\r\n",
					"    StructField(\"Cuotas\", StringType(), nullable=True)\r\n",
					"])\r\n",
					"\r\n",
					"df_Cuotas = spark.createDataFrame([], schema9)\r\n",
					"ArrayCuotas = []\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 37
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Obtener informacion de transacciones\r\n",
					"\r\n",
					"obtenerIDDataTranscciones = False\r\n",
					"obtenerFechaTranscciones = False\r\n",
					"obtenerDescripcionTranscciones = False\r\n",
					"obtenerCostoTranscciones = False\r\n",
					"obtenerTasaPactada = False\r\n",
					"obtenerTasaFacturada = False\r\n",
					"obtenerCargosYAbonos = False\r\n",
					"obtenerSaldoADiferir = False\r\n",
					"obtenerCuotas = False\r\n",
					"\r\n",
					"iteradorIDDataTranscciones = 1\r\n",
					"iteradorFechaDataTranscciones = 1\r\n",
					"iteradorDescripcionTranscciones = 1\r\n",
					"iteradorCostoTranscciones = 1\r\n",
					"iteradorTasaPactada = 1\r\n",
					"iteradorTasaFacturada = 1\r\n",
					"iteradorTasaCargosYAbonos = 1\r\n",
					"iteradorSaldoAdiferir = 1\r\n",
					"iteradorCuotas = 1\r\n",
					"\r\n",
					"for row in df_formated.collect():\r\n",
					"    \r\n",
					"    if (obtenerIDDataTranscciones == True):\r\n",
					"        if (row[\"contenido\"] == \"\"):\r\n",
					"             obtenerIDDataTranscciones = False\r\n",
					"        else:\r\n",
					"            ArrayIdTransacciones.append((iteradorIDDataTranscciones, row[\"contenido\"]))\r\n",
					"            iteradorIDDataTranscciones = iteradorIDDataTranscciones + 1\r\n",
					"\r\n",
					"    if (obtenerFechaTranscciones == True):\r\n",
					"        if (row[\"contenido\"] == \"\"):\r\n",
					"            obtenerFechaTranscciones = False\r\n",
					"        else:\r\n",
					"            ArrayFechaTransacciones.append((iteradorFechaDataTranscciones, row[\"contenido\"]))\r\n",
					"            iteradorFechaDataTranscciones = iteradorFechaDataTranscciones + 1\r\n",
					"\r\n",
					"    if (obtenerDescripcionTranscciones == True):\r\n",
					"        if (row[\"contenido\"] == \"\" and iteradorDescripcionTranscciones != 1):\r\n",
					"            obtenerDescripcionTranscciones = False\r\n",
					"            obtenerCostoTranscciones = True\r\n",
					"        else:\r\n",
					"            if row[\"contenido\"] != \"\":\r\n",
					"                ArrayDescripcionTransacciones.append((iteradorDescripcionTranscciones, row[\"contenido\"]))\r\n",
					"                iteradorDescripcionTranscciones = iteradorDescripcionTranscciones + 1\r\n",
					"\r\n",
					"    if (obtenerCostoTranscciones == True):\r\n",
					"        if (row[\"contenido\"] == \"\" and iteradorCostoTranscciones != 1):\r\n",
					"            obtenerCostoTranscciones = False\r\n",
					"        else:\r\n",
					"            if row[\"contenido\"] != \"\":\r\n",
					"                Valor = row[\"contenido\"]\r\n",
					"                Valor = Valor.replace(\",\", \"\")\r\n",
					"                if \"-\" in Valor:\r\n",
					"                    Valor = Valor.replace(\"-\", \"\")                    \r\n",
					"                    Valor = \"-\"+Valor\r\n",
					"                Valor = float(Valor)\r\n",
					"                ArrayCostoTransacciones.append((iteradorCostoTranscciones, Valor))\r\n",
					"                iteradorCostoTranscciones = iteradorCostoTranscciones + 1\r\n",
					"\r\n",
					"    if (obtenerTasaPactada == True):\r\n",
					"        if (row[\"contenido\"] == \"\"):\r\n",
					"            obtenerTasaPactada = False\r\n",
					"        else:\r\n",
					"            Valor = row[\"contenido\"]\r\n",
					"            Valor = Valor.replace(\",\", \"\")\r\n",
					"            Valor = float(Valor)\r\n",
					"            ArrayTasaPactada.append((iteradorTasaPactada, Valor))            \r\n",
					"            iteradorTasaPactada = iteradorTasaPactada + 1\r\n",
					"\r\n",
					"    if (obtenerTasaFacturada == True):\r\n",
					"        if (row[\"contenido\"] == \"\"):\r\n",
					"            obtenerTasaFacturada = False\r\n",
					"        else:\r\n",
					"            Valor = row[\"contenido\"]\r\n",
					"            Valor = Valor.replace(\",\", \"\")\r\n",
					"            Valor = float(Valor)\r\n",
					"            ArrayTasaFacturada.append((iteradorTasaFacturada, Valor))            \r\n",
					"            iteradorTasaFacturada = iteradorTasaFacturada + 1\r\n",
					"\r\n",
					"    if (obtenerCargosYAbonos == True):        \r\n",
					"        if (row[\"contenido\"] == \"\" and iteradorTasaCargosYAbonos != 1):\r\n",
					"            obtenerCargosYAbonos = False\r\n",
					"        else:\r\n",
					"            if row[\"contenido\"] != \"\":\r\n",
					"                Valor = row[\"contenido\"]\r\n",
					"                Valor = Valor.replace(\",\", \"\")\r\n",
					"                if \"-\" in Valor:\r\n",
					"                    Valor = Valor.replace(\"-\", \"\")                    \r\n",
					"                    Valor = \"-\"+Valor\r\n",
					"                Valor = float(Valor)\r\n",
					"                ArrayCargosYAbonos.append((iteradorTasaCargosYAbonos, Valor))\r\n",
					"                iteradorTasaCargosYAbonos = iteradorTasaCargosYAbonos + 1\r\n",
					"\r\n",
					"    if (obtenerSaldoADiferir == True):        \r\n",
					"        #Omitir primer espacio\r\n",
					"        if (row[\"contenido\"] == \"\" and iteradorSaldoAdiferir != 1):           \r\n",
					"            obtenerSaldoADiferir = False\r\n",
					"        else:\r\n",
					"             #Cuando ya se ha recorrido cargos y abonos\r\n",
					"            if obtenerCargosYAbonos == False:\r\n",
					"                if row[\"contenido\"] != \"\":\r\n",
					"                    Valor = row[\"contenido\"]\r\n",
					"                    Valor = Valor.replace(\",\", \"\")\r\n",
					"                    if \"-\" in Valor:\r\n",
					"                        Valor = Valor.replace(\"-\", \"\")                    \r\n",
					"                        Valor = \"-\"+Valor\r\n",
					"                    Valor = float(Valor)                                            \r\n",
					"                    ArraySaldoADiferir.append((iteradorSaldoAdiferir, Valor))\r\n",
					"                    iteradorSaldoAdiferir = iteradorSaldoAdiferir + 1\r\n",
					"\r\n",
					"\r\n",
					"    if (obtenerCuotas == True):          \r\n",
					"        if (\"Defensor\" in row[\"contenido\"]):           \r\n",
					"                obtenerCuotas = False\r\n",
					"                #eliminar el ultimo elemento que e su espaico antes de parar\r\n",
					"                ArrayCuotas.pop(-1)\r\n",
					"        else:            \r\n",
					"            #Cuando ya se ha recorrido saldo a diferir\r\n",
					"            if obtenerSaldoADiferir == False:\r\n",
					"                #evalua el primer espacio para omitirlo los demas los debe insertar\r\n",
					"                if (row[\"contenido\"] == \"\" and iteradorCuotas == 1):                                                                                                                        \r\n",
					"                    iteradorCuotas = iteradorCuotas + 1\r\n",
					"                    \r\n",
					"                else:\r\n",
					"                    #Reiniciariterador para evitar que se corra el codigo y evlauar que la lista este vacia par aa;adir el pirmer elemento\r\n",
					"                    if (iteradorCuotas == 2 and bool(ArrayCuotas) == False):                       \r\n",
					"                        iteradorCuotas = 1\r\n",
					"\r\n",
					"                    ArrayCuotas.append((iteradorCuotas, row[\"contenido\"]))\r\n",
					"                    iteradorCuotas = iteradorCuotas + 1\r\n",
					"\r\n",
					"    if (row[\"contenido\"] == \"Autorización\"):\r\n",
					"        obtenerIDDataTranscciones = True\r\n",
					"\r\n",
					"    if (row[\"contenido\"] == \"Transacción\"):\r\n",
					"        obtenerFechaTranscciones = True\r\n",
					"\r\n",
					"    if (row[\"contenido\"] == \"Valor Original\"):\r\n",
					"        obtenerDescripcionTranscciones = True\r\n",
					"\r\n",
					"    if (row[\"contenido\"] == \"Pactada\"):\r\n",
					"        obtenerTasaPactada = True\r\n",
					"    \r\n",
					"    if (row[\"contenido\"] == \"Facturada\"):\r\n",
					"        obtenerTasaFacturada = True\r\n",
					"\r\n",
					"    if (row[\"contenido\"] == \"Cuotas\"):\r\n",
					"        obtenerCargosYAbonos = True\r\n",
					"        obtenerSaldoADiferir = True\r\n",
					"        obtenerCuotas = True\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 38
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Complementar Datos\r\n",
					"\r\n",
					"#Completar Data TasaPactada\r\n",
					"while (iteradorTasaPactada < iteradorIDDataTranscciones):\r\n",
					"    ArrayTasaPactada.append((iteradorTasaPactada, 0.0))\r\n",
					"    iteradorTasaPactada = iteradorTasaPactada + 1  \r\n",
					"\r\n",
					"\r\n",
					"#Completar Data TasaFacturada\r\n",
					"while (iteradorTasaFacturada < iteradorIDDataTranscciones):\r\n",
					"    ArrayTasaFacturada.append((iteradorTasaFacturada, 0.0))\r\n",
					"    iteradorTasaFacturada = iteradorTasaFacturada + 1  \r\n",
					""
				],
				"execution_count": 39
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Crear dataframes por cadaq colmna asociada a transaccion\r\n",
					"\r\n",
					"df_idTransacciones = spark.createDataFrame(ArrayIdTransacciones, schema1)\r\n",
					"df_FechaTransacciones = spark.createDataFrame(ArrayFechaTransacciones, schema2)\r\n",
					"df_DescripcionTransacciones = spark.createDataFrame(ArrayDescripcionTransacciones, schema3)\r\n",
					"df_CostoTransacciones = spark.createDataFrame(ArrayCostoTransacciones, schema4)\r\n",
					"df_TasaPactada = spark.createDataFrame(ArrayTasaPactada, schema5)\r\n",
					"df_TasaFacturada = spark.createDataFrame(ArrayTasaFacturada, schema6)\r\n",
					"df_CargosYAbonos = spark.createDataFrame(ArrayCargosYAbonos, schema7)\r\n",
					"df_SaldoADiferir = spark.createDataFrame(ArraySaldoADiferir, schema8)\r\n",
					"df_Cuotas = spark.createDataFrame(ArrayCuotas, schema9)"
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#df_idTransacciones.show()\r\n",
					"#df_FechaTransacciones.show()\r\n",
					"#df_DescripcionTransacciones.show()\r\n",
					"#df_CostoTransacciones.show()\r\n",
					"#df_TasaPactada.show()\r\n",
					"#df_TasaFacturada.show()\r\n",
					"#df_CargosYAbonos.show()\r\n",
					"#df_SaldoADiferir.show()\r\n",
					"#df_Cuotas.show()"
				],
				"execution_count": 41
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Consolidar Transacciones\r\n",
					"\r\n",
					"df_Transacciones = df_idTransacciones.join(df_FechaTransacciones, df_idTransacciones.id == df_FechaTransacciones.id, \"inner\") \\\r\n",
					"                  .join(df_DescripcionTransacciones, df_idTransacciones.id == df_DescripcionTransacciones.id, \"inner\") \\\r\n",
					"                  .join(df_CostoTransacciones, df_idTransacciones.id == df_CostoTransacciones.id, \"inner\") \\\r\n",
					"                  .join(df_TasaPactada, df_idTransacciones.id == df_TasaPactada.id, \"inner\") \\\r\n",
					"                  .join(df_TasaFacturada, df_idTransacciones.id == df_TasaFacturada.id, \"inner\") \\\r\n",
					"                  .join(df_CargosYAbonos, df_idTransacciones.id == df_CargosYAbonos.id, \"inner\") \\\r\n",
					"                  .join(df_SaldoADiferir, df_idTransacciones.id == df_SaldoADiferir.id, \"inner\") \\\r\n",
					"                  .join(df_Cuotas, df_idTransacciones.id == df_Cuotas.id, \"inner\") \\\r\n",
					"                  .select( \\\r\n",
					"                        df_idTransacciones.IdTransaccion, \\\r\n",
					"                        df_FechaTransacciones.FechaTransaccion, \\\r\n",
					"                        df_DescripcionTransacciones.DescripcionTransaccion, \\\r\n",
					"                        df_CostoTransacciones.CostoTransaccion, \\\r\n",
					"                        df_TasaPactada.TasaPactada, \\\r\n",
					"                        df_TasaFacturada.TasaFacturada, \\\r\n",
					"                        df_CargosYAbonos.CargosYAbonos, \\\r\n",
					"                        df_SaldoADiferir.SaldoADiferir, \\\r\n",
					"                        df_Cuotas.Cuotas                       \r\n",
					"                        )"
				],
				"execution_count": 42
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Generar archivos con informacion\r\n",
					"\r\n",
					"# crear parquet file para cliente\r\n",
					"df_Cliente.write.mode(\"overwrite\").parquet(path_sink+\"/Cliente\")\r\n",
					"\r\n",
					"# crear parquet file para porducto\r\n",
					"df_Producto.write.mode(\"overwrite\").parquet(path_sink+\"/Producto\")\r\n",
					"\r\n",
					"# crear parquet file para transacciones\r\n",
					"df_Producto.write.mode(\"overwrite\").parquet(path_sink+\"/Transacciones\")\r\n",
					""
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					""
				],
				"execution_count": null
			}
		]
	}
}