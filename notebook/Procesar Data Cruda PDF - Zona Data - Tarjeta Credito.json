{
	"name": "Procesar Data Cruda PDF - Zona Data - Tarjeta Credito",
	"properties": {
		"folder": {
			"name": "LecturaScripts"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spproymaestria",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "1288388c-125a-4787-ad81-9f0a619e5315"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/01c2d20c-2c85-4121-8018-3a801e74d84c/resourceGroups/ProyectoMaestria/providers/Microsoft.Synapse/workspaces/synapseproyectomaestria/bigDataPools/spproymaestria",
				"name": "spproymaestria",
				"type": "Spark",
				"endpoint": "https://synapseproyectomaestria.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spproymaestria",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"#Importar Librerias Necesarias\r\n",
					"from pyspark.sql.types import StructType, StructField, StringType, IntegerType, DateType, DoubleType\r\n",
					"from pyspark.sql.window import Window\r\n",
					"from pyspark.sql.functions import *"
				],
				"execution_count": 529
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"#Configurar parametros aqui\r\n",
					"\r\n",
					"user = \"bsmoralesg@outlook.com\"\r\n",
					"type = \"Tarjeta Credito\"\r\n",
					"fecha = \"10012023\"\r\n",
					"#name = \"Extracto_403340132_202305_TARJETA_VISA_2166\"\r\n",
					"#name = \"Extracto_7358651_202108_TARJETA_VISA_2166\"\r\n",
					"\r\n",
					"#name = \"Extracto_392576648_202304_TARJETA_VISA_2166\"\r\n",
					"#name = \"Extracto_369280261_202303_TARJETA_VISA_2166\"\r\n",
					"#name = \"Extracto_231339919_202209_TARJETA_VISA_2166\"\r\n",
					"name = \"Extracto_204864725_202207_TARJETA_VISA_2166\""
				],
				"execution_count": 530
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Configurar rutas de origen y destino de archivos\r\n",
					"\r\n",
					"pathsource = \"abfss://stagedata@datalakeproyectomaestria.dfs.core.windows.net/\"+user+\"/\"+type+\"/\"+fecha+\"/\"+name+\"/Raw\"\r\n",
					"path_sink = \"abfss://stagedata@datalakeproyectomaestria.dfs.core.windows.net/\"+user+\"/\"+type+\"/\"+fecha+\"/\"+name"
				],
				"execution_count": 531
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"#Obtener Datos para Tarjeta Credito\r\n",
					"\r\n",
					"DataCruda = spark.read.load(pathsource+\"/*.parquet\", format='parquet')"
				],
				"execution_count": 532
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Dividir los valores por salto de linea\r\n",
					"\r\n",
					"df_split = DataCruda.withColumn(\"contenido\", split(DataCruda[\"contenido\"], \"\\n\"))\r\n",
					"\r\n",
					"# Transformar la columna array para crear una nueva fila por cada elemento\r\n",
					"df_formated = df_split.select(df_split.index, df_split.pagenumber, df_split.x0, df_split.x1, df_split.y0, df_split.y1, explode(\"contenido\").alias(\"contenido\"))\r\n",
					"\r\n",
					"#Crear identificador unico  basado enel orden de lectura\r\n",
					"\r\n",
					"Incremental = Window.orderBy(\"pagenumber\",\"index\")\r\n",
					"df_formated = df_formated.withColumn(\"UniqueId\", row_number().over(Incremental))"
				],
				"execution_count": 533
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display (df_formated)"
				],
				"execution_count": 534
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Obtener Informacion de Cliente\r\n",
					"\r\n",
					"Nombre = df_formated.select(df_formated.contenido).where((df_formated.UniqueId == 2)).first()[0]\r\n",
					"Email = user\r\n",
					"Direccion = df_formated.select(df_formated.contenido).where(df_formated.UniqueId == 4).first()[0]\r\n",
					"Ciudad_1 = df_formated.select(df_formated.contenido).where(df_formated.UniqueId == 5).first()[0]\r\n",
					"Ciudad_2 = df_formated.select(df_formated.contenido).where(df_formated.UniqueId == 6).first()[0]\r\n",
					"\r\n",
					"# Crear dataframe para informacion de cliente\r\n",
					"\r\n",
					"schemaCliente = StructType([ \\\r\n",
					"    StructField(\"Nombre\",StringType(),True), \\\r\n",
					"    StructField(\"Email\",StringType(),True), \\\r\n",
					"    StructField(\"Direccion\",StringType(),True), \\\r\n",
					"    StructField(\"Ciudad_1\",StringType(),True), \\\r\n",
					"    StructField(\"Ciudad_2\", StringType(), True) \\\r\n",
					"  ])\r\n",
					"\r\n",
					"data_Cliente = [(Nombre, Email, Direccion, Ciudad_1, Ciudad_2)]\r\n",
					"\r\n",
					"df_Cliente = spark.createDataFrame(data=data_Cliente,schema=schemaCliente)"
				],
				"execution_count": 535
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Obtener Informacion de Prodcuto\r\n",
					"\r\n",
					"\r\n",
					"TipoProducto = 'Tarjeta Credito'\r\n",
					"CupoTotal =  df_formated.select(df_formated.contenido).where(df_formated.x0 == 65.0).first()[0]\r\n",
					"NumeroTarjeta = df_formated.select(df_formated.contenido).where(df_formated.x0 == 465.0).first()[0]\r\n",
					"TasaInteresMVCompra1Mes = df_formated.select(df_formated.contenido).where(df_formated.x0 == 113.0).collect()[0].__getitem__('contenido')\r\n",
					"TasaInteresMVCompra2MesOMas = df_formated.select(df_formated.contenido).where(df_formated.x0 == 113.0).collect()[1].__getitem__('contenido')\r\n",
					"TasaInteresMVImpuestos = df_formated.select(df_formated.contenido).where(df_formated.x0 == 113.0).collect()[2].__getitem__('contenido')\r\n",
					"TasaInteresMVAvances = df_formated.select(df_formated.contenido).where(df_formated.x0 == 113.0).collect()[3].__getitem__('contenido')\r\n",
					"TasaInteresMVMora = df_formated.select(df_formated.contenido).where(df_formated.x0 == 113.0).collect()[4].__getitem__('contenido')\r\n",
					"TasaInteresEACompra1Mes = df_formated.select(df_formated.contenido).where(df_formated.x0 == 153.0).collect()[0].__getitem__('contenido')\r\n",
					"TasaInteresEACompra2MesOMas = df_formated.select(df_formated.contenido).where(df_formated.x0 == 153.0).collect()[1].__getitem__('contenido')\r\n",
					"TasaInteresEAImpuestos = df_formated.select(df_formated.contenido).where(df_formated.x0 == 153.0).collect()[2].__getitem__('contenido')\r\n",
					"TasaInteresEAAvances = df_formated.select(df_formated.contenido).where(df_formated.x0 == 153.0).collect()[3].__getitem__('contenido')\r\n",
					"TasaInteresEAMora = df_formated.select(df_formated.contenido).where(df_formated.x0 == 153.0).collect()[4].__getitem__('contenido')\r\n",
					"\r\n",
					"# Crear dataframe para informacion de producto\r\n",
					"\r\n",
					"schemaProducto = StructType([ \\\r\n",
					"    StructField(\"TipoProducto\",StringType(),True), \\\r\n",
					"    StructField(\"CupoTotal\",StringType(),True), \\\r\n",
					"    StructField(\"NumeroTarjeta\",StringType(),True), \\\r\n",
					"    StructField(\"TasaInteresMVCompra1Mes\", StringType(), True), \\\r\n",
					"    StructField(\"TasaInteresMVCompra2MesOMas\", StringType(), True), \\\r\n",
					"    StructField(\"TasaInteresMVImpuestos\", StringType(), True), \\\r\n",
					"    StructField(\"TasaInteresMVAvances\", StringType(), True), \\\r\n",
					"    StructField(\"TasaInteresMVMora\", StringType(), True), \\\r\n",
					"    StructField(\"TasaInteresEACompra1Mes\", StringType(), True), \\\r\n",
					"    StructField(\"TasaInteresEACompra2MesOMas\", StringType(), True), \\\r\n",
					"    StructField(\"TasaInteresEAImpuestos\", StringType(), True), \\\r\n",
					"    StructField(\"TasaInteresEAAvances\", StringType(), True), \\\r\n",
					"    StructField(\"TasaInteresEAMora\", StringType(), True) \\\r\n",
					"  ])\r\n",
					"\r\n",
					"data_Producto = [(TipoProducto, CupoTotal, NumeroTarjeta, TasaInteresMVCompra1Mes, TasaInteresMVCompra2MesOMas, TasaInteresMVImpuestos, \\\r\n",
					"    TasaInteresMVAvances, TasaInteresMVMora, TasaInteresEACompra1Mes, TasaInteresEACompra1Mes, TasaInteresEAImpuestos, TasaInteresEAAvances, TasaInteresEAMora\r\n",
					")]\r\n",
					"\r\n",
					"df_Producto = spark.createDataFrame(data=data_Producto,schema=schemaProducto)\r\n",
					""
				],
				"execution_count": 536
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Extraer informaicon de transacciones\r\n",
					"\r\n",
					"# Definir incrementales basado en el uniqueid\r\n",
					"\r\n",
					"Incremental = Window.orderBy(\"UniqueId\")\r\n",
					"\r\n",
					"#Extraer id de transacciones\r\n",
					"\r\n",
					"df_idTransacciones = df_formated.select(df_formated.contenido.alias(\"IdTransaccion\"), df_formated.UniqueId).where \\\r\n",
					"    ( \\\r\n",
					"        ((df_formated.x0 == 33.0) | (df_formated.x0 == 35.0)) & \\\r\n",
					"        (df_formated.contenido != \"Número de\")  & \\\r\n",
					"        (df_formated.contenido != \"Autorización\")  & \\\r\n",
					"        (df_formated.contenido != \"\") \r\n",
					"    )\r\n",
					"df_idTransacciones = df_idTransacciones.withColumn(\"id\", row_number().over(Incremental))\r\n",
					"\r\n",
					"# Obtener cantidad de transacciones\r\n",
					"CantidadTransacciones = df_idTransacciones.count()\r\n",
					"\r\n",
					"# Extraer fecha de transacciones\r\n",
					"\r\n",
					"df_FechaTransacciones = df_formated.select(df_formated.contenido.alias(\"FechaTransaccion\"), df_formated.UniqueId).where \\\r\n",
					"    ( \\\r\n",
					"        ((df_formated.x0 == 90.0) | (df_formated.x0 == 92.0)) & \\\r\n",
					"        (df_formated.contenido != \"Transacción\")  & \\\r\n",
					"        (df_formated.contenido != \"Fecha de\")  & \\\r\n",
					"        (df_formated.contenido != \"ESTADO DE CUENTA EN:\")  & \\\r\n",
					"        (df_formated.contenido != \"\") \r\n",
					"    )\r\n",
					"df_FechaTransacciones = df_FechaTransacciones.withColumn(\"id\", row_number().over(Incremental))\r\n",
					"\r\n",
					"\r\n",
					"# Extraer descripcion de transacciones\r\n",
					"\r\n",
					"df_DescripcionTransacciones = df_formated.select(df_formated.contenido.alias(\"DescripcionTransaccion\"), df_formated.UniqueId).where \\\r\n",
					"    ( \\\r\n",
					"        (df_formated.x0 == 135.0) & \\\r\n",
					"        (df_formated.contenido != \"ESTADO DE CUENTA EN:\") & \\\r\n",
					"        (df_formated.contenido != \"Pactada\") & \\\r\n",
					"        (~ df_formated.contenido.contains('VR MONEDA ORIG')) & \\\r\n",
					"        (df_formated.contenido != \"\") \r\n",
					"    )\r\n",
					"df_DescripcionTransacciones = df_DescripcionTransacciones.withColumn(\"id\", row_number().over(Incremental))\r\n",
					"\r\n",
					"\r\n",
					"# Extraer Costo de transacciones\r\n",
					"\r\n",
					"df_CostoTransacciones = df_formated.select(df_formated.contenido.alias(\"CostoTransaccion\"), df_formated.UniqueId).where \\\r\n",
					"    ( \\\r\n",
					"        ((df_formated.x0 >= 307.0) & (df_formated.x0 <= 317)) & \\\r\n",
					"        (df_formated.contenido != \"\")\r\n",
					"    )\r\n",
					"df_CostoTransacciones = df_CostoTransacciones.withColumn('CostoTransaccion', \\\r\n",
					"        when(df_CostoTransacciones.CostoTransaccion.contains('-'), concat(lit(\"-\"), regexp_replace(df_CostoTransacciones.CostoTransaccion, '-', ''))) \\\r\n",
					"        .otherwise(df_CostoTransacciones.CostoTransaccion)\r\n",
					"    )\r\n",
					"df_CostoTransacciones = df_CostoTransacciones.withColumn(\"id\", row_number().over(Incremental))\r\n",
					"\r\n",
					"\r\n",
					"# Extraer Tasa Pactada\r\n",
					"\r\n",
					"df_TasaPactada = df_formated.select(df_formated.contenido.alias(\"TasaPactada\"), df_formated.UniqueId).where \\\r\n",
					"    ( \\\r\n",
					"            (df_formated.x0 == 354.00) & \\\r\n",
					"            (df_formated.contenido != \"Pactada\") & \\\r\n",
					"            (df_formated.contenido != \"\")\r\n",
					"    )\r\n",
					"\r\n",
					"# Completar datos Faltantes\r\n",
					"\r\n",
					"if (df_TasaPactada.count() !=  CantidadTransacciones):\r\n",
					"    MaximaCantidadRegistros = df_TasaPactada.count()\r\n",
					"    RegistrosPendintes = CantidadTransacciones - MaximaCantidadRegistros\r\n",
					"    MaxUniqueID = df_TasaPactada.select(max(df_TasaPactada.UniqueId)).first()[0]\r\n",
					"    \r\n",
					"    if MaxUniqueID is None:\r\n",
					"        MaxUniqueID = 1\r\n",
					"\r\n",
					"    for i in range (RegistrosPendintes):                \r\n",
					"        newRow = spark.createDataFrame([(\"\",str(MaxUniqueID+(i+1)))])\r\n",
					"        df_TasaPactada = df_TasaPactada.union(newRow)\r\n",
					"\r\n",
					"df_TasaPactada = df_TasaPactada.withColumn(\"id\", row_number().over(Incremental))\r\n",
					"\r\n",
					"\r\n",
					"# Extraer Tasa Facturada\r\n",
					"\r\n",
					"df_TasaFacturada = df_formated.select(df_formated.contenido.alias(\"TasaFacturada\"), df_formated.UniqueId).where \\\r\n",
					"    ( \\\r\n",
					"            (df_formated.x0 == 389.00) & \\\r\n",
					"            (df_formated.contenido != \"Tasa EA\") & \\\r\n",
					"            (df_formated.contenido != \"Facturada\") & \\\r\n",
					"            (df_formated.contenido != \"\")\r\n",
					"    )\r\n",
					"\r\n",
					"# Completar datos Faltantes\r\n",
					"\r\n",
					"if (df_TasaFacturada.count() !=  CantidadTransacciones):\r\n",
					"    MaximaCantidadRegistros = df_TasaFacturada.count()\r\n",
					"    RegistrosPendintes = CantidadTransacciones - MaximaCantidadRegistros\r\n",
					"    MaxUniqueID = df_TasaFacturada.select(max(df_TasaFacturada.UniqueId)).first()[0]\r\n",
					"    \r\n",
					"    if MaxUniqueID is None:\r\n",
					"        MaxUniqueID = 1\r\n",
					"    \r\n",
					"    for i in range (RegistrosPendintes):                \r\n",
					"        newRow = spark.createDataFrame([(\"\",str(MaxUniqueID+(i+1)))])\r\n",
					"        df_TasaFacturada = df_TasaFacturada.union(newRow)\r\n",
					"\r\n",
					"df_TasaFacturada = df_TasaFacturada.withColumn(\"id\", row_number().over(Incremental))\r\n",
					"\r\n",
					"\r\n",
					"# Extraer Cargos Y Abonos\r\n",
					"\r\n",
					"df_CargosYAbonos = df_formated.select(df_formated.contenido.alias(\"CargosYAbonos\"), df_formated.UniqueId).where \\\r\n",
					"    ( \\\r\n",
					"\r\n",
					"            ((df_formated.x0 >= 448.90) & (df_formated.x0 <= 460.0)) & \\\r\n",
					"            (df_formated.contenido.rlike(\"[0-9]\")) & \\\r\n",
					"            (df_formated.contenido != \"\")\r\n",
					"    )\r\n",
					"df_CargosYAbonos = df_CargosYAbonos.withColumn('CargosYAbonos', \\\r\n",
					"        when(df_CargosYAbonos.CargosYAbonos.contains('-'), concat(lit(\"-\"), regexp_replace(df_CargosYAbonos.CargosYAbonos, '-', ''))) \\\r\n",
					"        .otherwise(df_CargosYAbonos.CargosYAbonos)\r\n",
					"    )\r\n",
					"df_CargosYAbonos = df_CargosYAbonos.withColumn(\"id\", row_number().over(Incremental))\r\n",
					"\r\n",
					"\r\n",
					"# Extraer Saldo A diferir\r\n",
					"\r\n",
					"df_SaldoADiferir = df_formated.select(df_formated.contenido.alias(\"SaldoADiferir\"), df_formated.UniqueId).where \\\r\n",
					"    ( \\\r\n",
					"            (df_formated.x0 == 540.33) &             \r\n",
					"            (df_formated.contenido != \"\")\r\n",
					"    )\r\n",
					"df_SaldoADiferir = df_SaldoADiferir.withColumn(\"id\", row_number().over(Incremental))\r\n",
					"\r\n",
					"\r\n",
					"# Extraer Cuotas\r\n",
					"\r\n",
					"df_Cuotas = df_formated.select(df_formated.contenido.alias(\"Cuotas\"), df_formated.UniqueId).where \\\r\n",
					"    ( \\\r\n",
					"            (df_formated.x0 >= 567.0) & (df_formated.x0 <= 571.0) &\r\n",
					"            (df_formated.contenido != \"\")                    \r\n",
					"    )\r\n",
					"df_Cuotas = df_Cuotas.withColumn(\"id\", row_number().over(Incremental))\r\n",
					"\r\n",
					"\r\n",
					"#Trear las descripciones para comparar con ellas eliminando los blancos que se generan en las cuotas\r\n",
					"\r\n",
					"df_DescripcionsFiltradas = df_DescripcionTransacciones.select(df_DescripcionTransacciones.DescripcionTransaccion, \\\r\n",
					"    df_DescripcionTransacciones.UniqueId, df_DescripcionTransacciones.id.alias(\"OriginalID\") ).where \\\r\n",
					"    ( \\\r\n",
					"            (~ df_DescripcionTransacciones.DescripcionTransaccion.contains('ABONO')) &\r\n",
					"            (~ df_DescripcionTransacciones.DescripcionTransaccion.contains('CUOTA DE MANEJO'))                    \r\n",
					"    )\r\n",
					"df_DescripcionsFiltradas = df_DescripcionsFiltradas.withColumn(\"id\", row_number().over(Incremental))  \r\n",
					"df_DescripcionsFiltradas = df_DescripcionsFiltradas.drop(\"UniqueId\")\r\n",
					"\r\n",
					"# Validar contra descripciones filtradas y actualizar - obtener real id de cuota\r\n",
					"\r\n",
					"df_Cuotas = df_DescripcionsFiltradas.join(df_Cuotas, df_DescripcionsFiltradas.id == df_Cuotas.id, \"inner\") \\\r\n",
					"    .select(df_Cuotas.Cuotas, df_Cuotas.UniqueId, df_DescripcionsFiltradas.OriginalID.alias(\"id\"))\r\n",
					"\r\n",
					"# Usar Left Join para consolidar Cuotas (con blancos y sin blancos)\r\n",
					"\r\n",
					"df_DescripcionTransacciones_aux = df_DescripcionTransacciones.select(df_DescripcionTransacciones.id) \r\n",
					"df_Cuotas = df_DescripcionTransacciones_aux.join(df_Cuotas, df_DescripcionTransacciones.id == df_Cuotas.id, \"left\") \\\r\n",
					"    .select(df_Cuotas.Cuotas, df_Cuotas.UniqueId, df_DescripcionTransacciones.id) \\\r\n",
					"    .fillna(0).fillna(\"\") \r\n",
					"\r\n",
					""
				],
				"execution_count": 537
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#df_idTransacciones.show(50)\r\n",
					"#df_FechaTransacciones.show(50)\r\n",
					"#df_DescripcionTransacciones.show(50)\r\n",
					"#df_CostoTransacciones.show(50)\r\n",
					"#df_TasaPactada.show(50)\r\n",
					"#df_TasaFacturada.show(50)\r\n",
					"#df_CargosYAbonos.show(50)\r\n",
					"#df_SaldoADiferir.show(50)\r\n",
					"#df_Cuotas.show(50)"
				],
				"execution_count": 538
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Consolidar Transacciones\r\n",
					"\r\n",
					"df_Transacciones = df_idTransacciones.join(df_FechaTransacciones, df_idTransacciones.id == df_FechaTransacciones.id, \"inner\") \\\r\n",
					"                  .join(df_DescripcionTransacciones, df_idTransacciones.id == df_DescripcionTransacciones.id, \"inner\") \\\r\n",
					"                  .join(df_CostoTransacciones, df_idTransacciones.id == df_CostoTransacciones.id, \"inner\") \\\r\n",
					"                  .join(df_TasaPactada, df_idTransacciones.id == df_TasaPactada.id, \"inner\") \\\r\n",
					"                  .join(df_TasaFacturada, df_idTransacciones.id == df_TasaFacturada.id, \"inner\") \\\r\n",
					"                  .join(df_CargosYAbonos, df_idTransacciones.id == df_CargosYAbonos.id, \"inner\") \\\r\n",
					"                  .join(df_SaldoADiferir, df_idTransacciones.id == df_SaldoADiferir.id, \"inner\") \\\r\n",
					"                  .join(df_Cuotas, df_idTransacciones.id == df_Cuotas.id, \"inner\") \\\r\n",
					"                  .select( \\\r\n",
					"                        df_idTransacciones.IdTransaccion, \\\r\n",
					"                        df_FechaTransacciones.FechaTransaccion, \\\r\n",
					"                        df_DescripcionTransacciones.DescripcionTransaccion, \\\r\n",
					"                        df_CostoTransacciones.CostoTransaccion, \\\r\n",
					"                        df_TasaPactada.TasaPactada, \\\r\n",
					"                        df_TasaFacturada.TasaFacturada, \\\r\n",
					"                        df_CargosYAbonos.CargosYAbonos, \\\r\n",
					"                        df_SaldoADiferir.SaldoADiferir, \\\r\n",
					"                        df_Cuotas.Cuotas                       \r\n",
					"                        )"
				],
				"execution_count": 539
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"#display(df_Cliente)\r\n",
					"#display(df_Producto)\r\n",
					"#display(df_Transacciones)"
				],
				"execution_count": 540
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Generar archivos con informacion\r\n",
					"\r\n",
					"# crear parquet file para cliente\r\n",
					"df_Cliente.write.mode(\"overwrite\").parquet(path_sink+\"/Cliente\")\r\n",
					"\r\n",
					"# crear parquet file para porducto\r\n",
					"df_Producto.write.mode(\"overwrite\").parquet(path_sink+\"/Producto\")\r\n",
					"\r\n",
					"# crear parquet file para transacciones\r\n",
					"df_Producto.write.mode(\"overwrite\").parquet(path_sink+\"/Transacciones\")\r\n",
					""
				],
				"execution_count": 541
			}
		]
	}
}