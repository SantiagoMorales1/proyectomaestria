{
	"name": "Procesar Data Cruda PDF - Zona Data - Cuenta Ahorro",
	"properties": {
		"folder": {
			"name": "LecturaScripts"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spproymaestria",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "543514c7-5eab-4bc7-ac09-9a6938f20f4d"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/01c2d20c-2c85-4121-8018-3a801e74d84c/resourceGroups/ProyectoMaestria/providers/Microsoft.Synapse/workspaces/synapseproyectomaestria/bigDataPools/spproymaestria",
				"name": "spproymaestria",
				"type": "Spark",
				"endpoint": "https://synapseproyectomaestria.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spproymaestria",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"#Importar Librerias Necesarias\r\n",
					"\r\n",
					"from pyspark.sql.types import StructType, StructField, StringType, IntegerType, DateType, DoubleType\r\n",
					"from pyspark.sql.window import Window\r\n",
					"from pyspark.sql.functions import *"
				],
				"execution_count": 59
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Configurar parametros aqui\r\n",
					"\r\n",
					"user = \"bsmoralesg@outlook.com\"\r\n",
					"type = \"Cuenta Ahorros\"\r\n",
					"fecha = \"10012023\"\r\n",
					"\r\n",
					"name = \"Extracto_49243429_202112_CTA_AHORROS_5557\"\r\n",
					"#name = \"Extracto_240056999_202209_CTA_AHORROS_5557\"\r\n",
					"#name = \"Extracto_307612445_202212_CTA_AHORROS_5557\"\r\n",
					"#name = \"Extracto_375992443_202303_CTA_AHORROS_5557\""
				],
				"execution_count": 60
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Configurar rutas de origen y destino de archivos\r\n",
					"\r\n",
					"pathsource = \"abfss://stagedata@datalakeproyectomaestria.dfs.core.windows.net/\"+user+\"/\"+type+\"/\"+fecha+\"/\"+name+\"/Raw\"\r\n",
					"path_sink = \"abfss://stagedata@datalakeproyectomaestria.dfs.core.windows.net/\"+user+\"/\"+type+\"/\"+fecha+\"/\"+name"
				],
				"execution_count": 61
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Obtener Datos para Tarjeta Credito\r\n",
					"\r\n",
					"DataCruda = spark.read.load(pathsource+\"/*.parquet\", format='parquet')"
				],
				"execution_count": 62
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Dividir los valores por salto de linea\r\n",
					"\r\n",
					"df_split = DataCruda.withColumn(\"contenido\", split(DataCruda[\"contenido\"], \"\\n\"))\r\n",
					"\r\n",
					"# Transformar la columna array para crear una nueva fila por cada elemento\r\n",
					"df_formated = df_split.select(df_split.index, df_split.pagenumber, df_split.x0, df_split.x1, df_split.y0, df_split.y1, explode(\"contenido\").alias(\"contenido\"))\r\n",
					"\r\n",
					"#Crear identificador unico  basado enel orden de lectura\r\n",
					"\r\n",
					"Incremental = Window.orderBy(\"pagenumber\",\"index\")\r\n",
					"df_formated = df_formated.withColumn(\"UniqueId\", row_number().over(Incremental))"
				],
				"execution_count": 63
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display (df_formated)"
				],
				"execution_count": 64
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Obtener Informacion de Cliente\r\n",
					"\r\n",
					"Nombre = df_formated.select(df_formated.contenido).where((df_formated.UniqueId == 1)).first()[0]\r\n",
					"Email = user\r\n",
					"Direccion = df_formated.select(df_formated.contenido).where(df_formated.UniqueId == 3).first()[0]\r\n",
					"\r\n",
					"CiudadData = df_formated.select(df_formated.contenido).where(df_formated.UniqueId == 5).first()[0]\r\n",
					"CiudadData = CiudadData.replace(\"$\",\"\")\r\n",
					"CiudadData = CiudadData.replace(\"D.C.\",\"\")\r\n",
					"CiudadData = CiudadData.split(\"  \")\r\n",
					"\r\n",
					"CiudadData[0] = CiudadData[0].replace(\"BOGOTA\",\"BOGOTA D.C\")\r\n",
					"Ciudad_1 = CiudadData[0].strip()\r\n",
					"\r\n",
					"CiudadData[1] = CiudadData[1].replace(\"BOGOTA\",\"BOGOTA D.C\")\r\n",
					"Ciudad_2 = CiudadData[1].strip()\r\n",
					"\r\n",
					"# Crear dataframe para informacion de cliente\r\n",
					"\r\n",
					"schemaCliente = StructType([ \\\r\n",
					"    StructField(\"Nombre\",StringType(),True), \\\r\n",
					"    StructField(\"Email\",StringType(),True), \\\r\n",
					"    StructField(\"Direccion\",StringType(),True), \\\r\n",
					"    StructField(\"Ciudad_1\",StringType(),True), \\\r\n",
					"    StructField(\"Ciudad_2\", StringType(), True) \\\r\n",
					"  ])\r\n",
					"\r\n",
					"data_Cliente = [(Nombre, Email, Direccion, Ciudad_1, Ciudad_2)]\r\n",
					"\r\n",
					"df_Cliente = spark.createDataFrame(data=data_Cliente,schema=schemaCliente)\r\n",
					"display(df_Cliente)"
				],
				"execution_count": 81
			}
		]
	}
}