{
	"name": "Notebook 1",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spproymaestria",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "8affa071-ebd8-4cdc-8699-2300694fb55d"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/01c2d20c-2c85-4121-8018-3a801e74d84c/resourceGroups/ProyectoMaestria/providers/Microsoft.Synapse/workspaces/synapseproyectomaestria/bigDataPools/spproymaestria",
				"name": "spproymaestria",
				"type": "Spark",
				"endpoint": "https://synapseproyectomaestria.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spproymaestria",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"#Importar Librerias Necesarias\r\n",
					"\r\n",
					"from pyspark.sql.functions import split\r\n",
					"from pyspark.sql.functions import col\r\n",
					"from pyspark.sql.functions import size\r\n",
					"from pyspark.sql.functions import explode\r\n",
					"from pyspark.sql.types import StructType, StructField, StringType, IntegerType\r\n",
					""
				],
				"execution_count": 151
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"#Obtener Datos para Tarjeta Credito\r\n",
					"\r\n",
					"DataCruda = spark.read.load('abfss://stagedata@datalakeproyectomaestria.dfs.core.windows.net/bsmoralesg@outlook.com/Tarjeta Credito/10012023/Extracto_7358651_202108_TARJETA_VISA_2166/*.parquet', format='parquet')\r\n",
					""
				],
				"execution_count": 66
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Dividir los vlaores por salto de linea\r\n",
					"\r\n",
					"df_split = df.withColumn(\"contenido\", split(df[\"contenido\"], \"\\n\"))\r\n",
					"\r\n",
					"# Transformar la columna array para crear una nueva fila por cada elemento\r\n",
					"df_fromated = df_split.select(explode(\"contenido\").alias(\"contenido\"))\r\n",
					""
				],
				"execution_count": 129
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#ObtenerInfomraicon de Cliente\r\n",
					"\r\n",
					"Nombre = df_fromated.collect()[1].asDict()[\"contenido\"]\r\n",
					"Direccion = df_fromated.collect()[3].asDict()[\"contenido\"]\r\n",
					"Ciudad_1 = df_fromated.collect()[4].asDict()[\"contenido\"]\r\n",
					"Ciudad_2 = df_fromated.collect()[5].asDict()[\"contenido\"]\r\n",
					""
				],
				"execution_count": 130
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Obtener Informacion de Prodcuto\r\n",
					"\r\n",
					"TipoProducto = 'Tarjeta Credito'\r\n",
					"CupoTotal =  df_fromated.collect()[54].asDict()[\"contenido\"]\r\n",
					"NumeroTarjeta = df_fromated.collect()[23].asDict()[\"contenido\"]\r\n",
					"TasaInteresMVCompra1Mes = df_fromated.collect()[93].asDict()[\"contenido\"]\r\n",
					"TasaInteresMVCompra2MesOMas = df_fromated.collect()[94].asDict()[\"contenido\"]\r\n",
					"TasaInteresMVImpuestos = df_fromated.collect()[95].asDict()[\"contenido\"]\r\n",
					"TasaInteresMVAvances = df_fromated.collect()[96].asDict()[\"contenido\"]\r\n",
					"TasaInteresMVMora = df_fromated.collect()[97].asDict()[\"contenido\"]\r\n",
					"TasaInteresEACompra1Mes = df_fromated.collect()[99].asDict()[\"contenido\"]\r\n",
					"TasaInteresEACompra2MesOMas =df_fromated.collect()[100].asDict()[\"contenido\"]\r\n",
					"TasaInteresEAImpuestos = df_fromated.collect()[101].asDict()[\"contenido\"]\r\n",
					"TasaInteresEAAvances = df_fromated.collect()[102].asDict()[\"contenido\"]\r\n",
					"TasaInteresEAMora = df_fromated.collect()[103].asDict()[\"contenido\"]\r\n",
					""
				],
				"execution_count": 134
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"schema = StructType([\r\n",
					"    StructField(\"id\", StringType(), nullable=True),\r\n",
					"    StructField(\"IdTransaccion\", IntegerType(), nullable=True)\r\n",
					"])\r\n",
					"\r\n",
					"df_idtransacciones = spark.createDataFrame([], schema)\r\n",
					"arraytransacciones = []\r\n",
					"\r\n",
					""
				],
				"execution_count": 152
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"obtenerData = False\r\n",
					"iterador = 1\r\n",
					"\r\n",
					"for row in df_fromated.collect():\r\n",
					"    \r\n",
					"    if (obtenerData == True):\r\n",
					"        arraytransacciones.append(iterador, row[\"contenido\"])\r\n",
					"\r\n",
					"    if (row[\"contenido\"] == \"Autorización\"):\r\n",
					"        obtenerData = True\r\n",
					"\r\n",
					"    if (row[\"contenido\"] == \"Autorización\"):       \r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Iterate over the elements in the array\r\n",
					"for row in df_fromated.collect():\r\n",
					"    #if (row[\"contenido\"] == \"Autorización\"):\r\n",
					"        print(row[\"contenido\"])\r\n",
					""
				],
				"execution_count": 155
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}