{
	"name": "Procesar Archivos PDF - Zona Stage",
	"properties": {
		"folder": {
			"name": "LecturaScripts"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spproymaestria",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "c121a6c0-314c-4775-8f54-954b48321f38"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/01c2d20c-2c85-4121-8018-3a801e74d84c/resourceGroups/ProyectoMaestria/providers/Microsoft.Synapse/workspaces/synapseproyectomaestria/bigDataPools/spproymaestria",
				"name": "spproymaestria",
				"type": "Spark",
				"endpoint": "https://synapseproyectomaestria.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spproymaestria",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"#Importando Librerias\r\n",
					"\r\n",
					"from pyspark.sql import SparkSession\r\n",
					"from io import BytesIO\r\n",
					"from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter\r\n",
					"from pdfminer.pdfpage import PDFPage\r\n",
					"from pdfminer.converter import TextConverter\r\n",
					"from pdfminer.layout import LAParams, LTTextBoxHorizontal, LTFigure\r\n",
					"from pdfminer.converter import PDFPageAggregator\r\n",
					"from pyspark.sql.types import StructType, StructField, StringType, IntegerType, DateType, DoubleType\r\n",
					"import io"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Creando sesion \r\n",
					"\r\n",
					"spark = SparkSession.builder \\\r\n",
					"    .appName(\"PDF Extraction\") \\\r\n",
					"    .getOrCreate()"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"#Capturar Parametros\r\n",
					"pdf_user = \"bsmoralesg@outlook.com\"\r\n",
					"pdf_type = \"Tarjeta Credito\"\r\n",
					"pdf_fecha = \"10012023\"\r\n",
					"file_name = \"Extracto_403340132_202305_TARJETA_VISA_2166.pdf\"\r\n",
					"#file_name = \"Extracto_7358651_202108_TARJETA_VISA_2166.pdf\"\r\n",
					"pdf_password = \"1233491047\""
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Consolidar Variables\r\n",
					"\r\n",
					"#Ruta Origen\r\n",
					"pdf_path_origin = \"abfss://stagefiles@datalakeproyectomaestria.dfs.core.windows.net/\"+pdf_user+\"/\"+pdf_type+\"/\"+pdf_fecha+\"/\"+file_name\r\n",
					"\r\n",
					"#Ruta Destino\r\n",
					"file_name = file_name.replace(\".pdf\", \"\")\r\n",
					"path_sink = \"abfss://stagedata@datalakeproyectomaestria.dfs.core.windows.net/\"+pdf_user+\"/\"+pdf_type+\"/\"+pdf_fecha+\"/\"+file_name+\"/Raw\""
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Definir estructura para datos crudos\r\n",
					"\r\n",
					"schemarawdata = StructType([\r\n",
					"    StructField(\"index\", IntegerType(), nullable=True),\r\n",
					"    StructField(\"pagenumber\", IntegerType(), nullable=True),\r\n",
					"    StructField(\"x0\", DoubleType(), nullable=True),\r\n",
					"    StructField(\"x1\", DoubleType(), nullable=True),\r\n",
					"    StructField(\"y0\", DoubleType(), nullable=True),\r\n",
					"    StructField(\"y1\", DoubleType(), nullable=True),\r\n",
					"    StructField(\"contenido\", StringType(), nullable=True)\r\n",
					"])\r\n",
					"\r\n",
					"df_RawDat = spark.createDataFrame([], schemarawdata)\r\n",
					"ArrayRawData = []\r\n",
					"\r\n",
					" "
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Procesar informacion - Capturar informacion\r\n",
					"\r\n",
					"\r\n",
					"# Leer the PDF file como bytes\r\n",
					"pdf_bytes = spark.read \\\r\n",
					"    .format(\"binaryFile\") \\\r\n",
					"    .option(\"path\", pdf_path_origin) \\\r\n",
					"    .load() \\\r\n",
					"    .select(\"content\") \\\r\n",
					"    .collect()[0][0]\r\n",
					"\r\n",
					"# crear un BytesIO stream de the PDF bytes\r\n",
					"pdf_stream = BytesIO(pdf_bytes)\r\n",
					"pdf_stream.seek(0)\r\n",
					"\r\n",
					"# Crear objeto PDFResourceManager y configurar parametros\r\n",
					"rsrcmgr = PDFResourceManager()\r\n",
					"retstr = io.StringIO()\r\n",
					"\r\n",
					"# Crear Objeto  TextConverter para las paginas dle PDF\r\n",
					"laparams = LAParams()\r\n",
					"device = TextConverter(rsrcmgr, retstr, laparams=laparams)\r\n",
					"\r\n",
					"# Crear objeto PDFPageInterpreter\r\n",
					"interpreter = PDFPageInterpreter(rsrcmgr, device)\r\n",
					"\r\n",
					"# Porcesar cada pagina del archivo PDF\r\n",
					"password = pdf_password.encode()\r\n",
					"pages = PDFPage.get_pages(pdf_stream, password=password, check_extractable=True)\r\n",
					"\r\n",
					"for page in pages:\r\n",
					"    interpreter.process_page(page)\r\n",
					"\r\n",
					"# Obtener el texto extraido del objeto StringIO\r\n",
					"pdf_content = retstr.getvalue()\r\n",
					"\r\n",
					"# Cerrar el objeto StringIO\r\n",
					"device.close()\r\n",
					"retstr.close()"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Leer the PDF file como bytes\r\n",
					"pdf_bytes = spark.read \\\r\n",
					"    .format(\"binaryFile\") \\\r\n",
					"    .option(\"path\", pdf_path_origin) \\\r\n",
					"    .load() \\\r\n",
					"    .select(\"content\") \\\r\n",
					"    .collect()[0][0]\r\n",
					"\r\n",
					"# crear un BytesIO stream de the PDF bytes\r\n",
					"pdf_stream = BytesIO(pdf_bytes)\r\n",
					"pdf_stream.seek(0)\r\n",
					"\r\n",
					"# Crear objeto PDFResourceManager y configurar parametros\r\n",
					"rsrcmgr = PDFResourceManager()\r\n",
					"retstr = io.StringIO()\r\n",
					"\r\n",
					"# Crear Objeto  TextConverter para las paginas dle PDF\r\n",
					"laparams = LAParams()\r\n",
					"#device = TextConverter(rsrcmgr, retstr, laparams=laparams)\r\n",
					"device = PDFPageAggregator(rsrcmgr, laparams=laparams)\r\n",
					"\r\n",
					"# Crear objeto PDFPageInterpreter\r\n",
					"interpreter = PDFPageInterpreter(rsrcmgr, device)\r\n",
					"\r\n",
					"# Porcesar cada pagina del archivo PDF\r\n",
					"password = pdf_password.encode()\r\n",
					"pages = PDFPage.get_pages(pdf_stream, password=password, check_extractable=True)    \r\n",
					"\r\n",
					"\r\n",
					"#Recorrer las Paginas del PDF \r\n",
					"pagenumber = 1\r\n",
					"for page in pages:\r\n",
					"        \r\n",
					"        # Process the page\r\n",
					"        pageraux = page\r\n",
					"        interpreter.process_page(page)\r\n",
					"        layout = device.get_result()\r\n",
					"\r\n",
					"        # Cambiar la pagina\r\n",
					"        if (page != pageraux):\r\n",
					"            pagenumber = pagenumber + 1\r\n",
					"        \r\n",
					"        # Iterar por cada elemnto del layout        \r\n",
					"        for element in layout:\r\n",
					"            if (not isinstance(element, LTFigure)):\r\n",
					"                \r\n",
					"                index = int(element.index)                \r\n",
					"                x0 = float(element.x0)\r\n",
					"                x1 = float(element.x1)\r\n",
					"                y0 = float(element.y0)\r\n",
					"                y1 = float(element.y1)\r\n",
					"                contenido = str(element.get_text())\r\n",
					"                ArrayRawData.append((index, pagenumber, x0, x1, y0, y1, contenido)) \r\n",
					"\r\n",
					"#Crear dataframe con toda la data cruda\r\n",
					"\r\n",
					"df_RawDat = spark.createDataFrame(ArrayRawData, schemarawdata)\r\n",
					"                "
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# crear parquet file\r\n",
					"df_RawDat.write.mode(\"overwrite\").parquet(path_sink)"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(df_RawDat)"
				],
				"execution_count": 11
			}
		]
	}
}